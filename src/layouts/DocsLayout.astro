---
import BaseLayout from "@/layouts/BaseLayout.astro";
import DocsMenu from "@/components/DocsMenu.astro";
import MultiTab from "@/components/MultiTab.astro";
import { Icon } from 'astro-icon/components';
import "@/layouts/prism-okaidia.min.css";

const { title, description } = Astro.props;
---

<style>
  .layout {
    --menu-width: 450px;
    --pad: 2.5rem;
    --page-width: calc(100% - 500px - var(--pad));

    display: grid;
    grid-template-columns: var(--menu-width) var(--page-width);

    @media (width <= 1350px) {
      grid-template-columns: 1fr;
      grid-template-rows: 1fr 1fr;

      & .page {
        padding-left: 2.5rem;
      }
    }
  }
</style>

<style is:global>
.page {
  min-height: 100vh;
  margin: 2rem var(--pad) 2rem 0;
  overflow-x: hidden;

  @media (width <= 1300px) {
    padding: 0!important;
    margin: 1rem;
    box-sizing: border-box;
  }

  & :is(h1, h2, h3) {
    font-family: Jost, sans-serif;
    font-weight: bold;
    margin: 4rem auto 3rem;
  }

  & h1 {
    font-size: 4rem;
    display: flex;
    align-items: center;
  }

  & h2 {
    font-size: 2rem;
    display: flex;
    align-items: center;
    color: #DBE04F;
    text-decoration: 1px solid underline;
    text-underline-offset: 10px;
    margin-bottom: 5rem;
  }

  & :is(h1, h2)::before {
    display: inline-block;
    content: url("/mtmi/images/anchor.svg");
    width: 32px;
    padding-right: 12px;
    translate: 0 -6px;
  }

  & h2::before {
    translate: 0 6px;
  }

  & :is(h1, h2)::after {
    content: "";
    display: flex;
    flex: 1;
    margin-left: 1.5rem;
    border-bottom: 2px dashed #888;
  }

  & p {
    font-family: "IBM Plex Mono", monospace;
    font-size: 1.25rem;

    & > :is(code, strong) {
      color: #d24fe1;
    }

    & a {
      color: #d24fe1;
      text-decoration-color: #d24fe1;
    }
  }

  & pre {
    background: #0f0b11;
    padding: 1.5rem;
    border: 2px solid #d24fe1;
    border-radius: 15px;
    margin-top: 4rem;
    margin-bottom: 4rem;
    position: relative;
    overflow-x: auto;

    & code {
      font-family: "IBM Plex Mono", monospace;
      font-size: 1.3rem;

      & .popbtn {
        --size: 28px;
        width: var(--size);
        height: var(--size);
        position: absolute;
        right: 1rem;
        bottom: 1rem;
        opacity: 0.5;

        &:hover {
          cursor: pointer;
          opacity: 1;
        }
      }
    }
  }

  & table {
    --color-odd: #301839;
    --color-even: #3c1e48;

    font-family: "IBM Plex Mono", monospace;
    font-size: 1.3rem;
    border-radius: 15px;
    overflow: hidden;
    border-collapse: collapse;
    width: 100%;
    margin-top: 4rem;

    & a {
      text-decoration-color: #f5f5f5;
      text-decoration-line: underline;
      text-underline-offset: 2px;
    }

    & th {
      background: #24122b;
      border-bottom: 3px solid #180c1d;
      color: #f5f5f5;
    }

    & tr :is(td, th):first-child {
      border-right: 3px solid #180c1d;
    }

    & :is(th, td) {
      padding: 0.75rem 1.5rem;
    }

    & td {
      padding-left: 1.25rem;
      padding-right: 1.25rem;
    }

    & tr:nth-child(odd) { background: var(--color-odd); }
    & tr:nth-child(even) { background: var(--color-even); }

    & code { color: #f27cff; }
    & td:first-child code { color: #f5f5f5 }
  }

  & blockquote {
    background: #784bb718;
    border: 2px solid #6623b144;
    color: #b581f0;
    padding: 0.25rem 2rem;
    margin: 2rem 0;
    border-radius: 10px;

    & p { font-size: 1.1rem; }
  }
}

/*
@media (width <= 1300px) {
  pre {
    width: calc(100vw - 1.1rem)!important;
    min-height: 100px;
    border-radius: 0!important;
    border: 0!important;
    padding: 0!important;
    margin: 0 -1rem!important;
  }
}
*/
</style>

<script type="module">
  const preCode = document.querySelectorAll("pre code");
  preCode.forEach(code => {
    const img = document.createElement("img");
    img.classList.add("popbtn");
    img.src = "/mtmi/images/copy.svg";
    code.append(img);

    img.addEventListener("click", async () => {
      const text = code.textContent;
      navigator.clipboard.writeText(text).then(() => {
        // Popover con OK / Cambiar icono
      }).catch(err => {
        // Popover con error / Cambiar icono
      });
    });
  });
</script>

<BaseLayout title={title} description={description}>
  <MultiTab />
  <div class="layout">
    <DocsMenu />
    <div class="page">
      <slot></slot>

    </div>

  </div>
</BaseLayout>
